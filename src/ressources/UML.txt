@startuml

title zFlux - Class Diagram

class zFlux

class Controller{
    log: Logger
    perf: PerformanceAnalysis
    influx: InfluxPusher
    redis: RedisQ

    main()
}

class Killmail {
    logger: Logger
    id: Int
    time: DateTime
    total_value: Float
    solar_system_name: String
    solar_system_security: float
    region_Name: String
    constellation_name: String
    attacker_is_npc: Bool
    attacker_is_awox: Bool
    attacker_is_solo: Bool
    attacker_amount: Int
    attacker_char_name: String
    attacker_corp_name: String
    attacker_alliance_name: String
    attacker_ship_names: String
    victim_damage_taken: Int
    victim_char_name: String
    victim_corp_name: String
    victim_alliance_name: String
    victim_ship_name: String


  __init__(unprocessed_killmail)
}

class Logger{
    __init__()
    return_level(level)
}

class PerformanceAnalysis{
    logger: Logger
    start_time: DateTime
    cycle_start
    cycle_end
    cur_cycle
    shortest_cycle
    longest_cycle
    avg_last100_cycle
    avg_last1000_cycle
    counter: Int
    avg100_list: List
    avg1000_list: List

    setCycleStart(): void
    setCycleEnd(): void
    calcCycleStats(): void
    avg100(): void
    avg1000(): void
    printStatus(): void
    logging(): void
}

class MongoPusher{
    __init_(): void
    write_to_database(): void
}

class InfluxPusher{
    logger: Logger
    __init__(): void
    assembleJsonBody(killmail Killmail): json_body List
    writeToDatabase(killmail Killmail): void

}

class InfluxPusherPerformance{
    assembleJsonBody(killmail Killmail): json_body List
    writeToDatabase(killmail Killmail): void
}
class InfluxPusherKillmail{
    assembleJsonBody(killmail Killmail): json_body List
    writeToDatabase(killmail Killmail): void
}

class RedisQ{
    logger: Logger
    __init__()
    makeCall(): unprocessed_killmail Dict
}

class EsiCall{
    logger: Logger
    __init__()
    makeCall(): names Dict

}

class NameFetcher << abstract >>{
    logger: Logger
    unprocessed_killmail: Dict

    __init__(unprocessed_killmail)
    make_esi_call(): EsiCall.makeCall()
    extract_from_killmail()
    return_results()

    csv_inv_groups_scraper(group_id_list)
    csv_inv_types_scraper(ship_id_list)
    csv_map_solar_system_scraper(solar_system_id_list)
}

class NameFetcherAttacker{
    __init__(unprocessed_killmail)
    extract_from_killmail()
    return_results()
}

class NameFetcherVictim{
    __init__(unprocessed_killmail)
    extract_from_killmail()
    return_results()
}

Class NameFetcherFinalBlow{
    __init__(unprocessed_killmail)
    extract_from_killmail()
    return_results()
}

class NameFetcherGeographic{
    __init__(unprocessed_killmail)
    extract_from_killmail()
    return_results()
}

NameFetcher <|-down- NameFetcherAttacker
NameFetcher <|-down- NameFetcherVictim
NameFetcher <|-down- NameFetcherFinalBlow
NameFetcher <|-down- NameFetcherGeographic

NameFetcher *-right- "1" EsiCall

InfluxPusher <|-down- InfluxPusherPerformance
InfluxPusher <|-down- InfluxPusherKillmail

Controller *-down- "1" Logger
Controller *-down- "1" PerformanceAnalysis
Controller *-down- "1" RedisQ
Controller *-right- "*" Killmail
Controller *-left- "1" InfluxPusher
Controller *-left- "1" MongoPusher

Killmail *-right- "*" NameFetcher

zFlux *-down- "1" Controller
@enduml